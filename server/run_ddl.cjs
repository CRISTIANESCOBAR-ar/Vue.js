/* global console */

const oracledb = require('oracledb')
const process = require('process')

// --- Lista de todos los comandos a ejecutar ---

// 1. Comandos para borrar las tablas (en orden inverso a la creación)
const dropStatements = [`DROP TABLE uster_tbl`, `DROP TABLE tensorapid`, `DROP TABLE uster_par`]

// 2. Comandos para crear las tablas y sus objetos asociados
const createStatements = [
  `create table uster_par (
     testnr           varchar2(32) primary key,
     catalog          varchar2(200),
     time_stamp       varchar2(100),
     lote             varchar2(100),
     sortiment        varchar2(100),
     article          varchar2(100),
     maschnr          varchar2(60),
     matclass         varchar2(100),
     nomcount         number,
     nomtwist         varchar2(100),
     uscode           varchar2(60),
     fb_mic           varchar2(100),
     fb_tipo          varchar2(100),
     fb_long          varchar2(100),
     fb_porc          number,
     laborant         varchar2(120),
     obs              clob,
     tuname           varchar2(120),
     groups           varchar2(120),
     within           varchar2(120),
     total            number,
     speed            varchar2(80),
     testtime         varchar2(80),
     slot             varchar2(80),
     absorberpressure varchar2(80),
     created_at       timestamp default systimestamp
  )`,
  `comment on table uster_par is
     'Campos extraídos desde archivos .PAR (preview detallado)'`,
  `create table uster_tbl (
     id            number generated by default as identity primary key,
     testnr        varchar2(32) not null,
     seqno         number not null,
     no_           number,
     created_at    timestamp default systimestamp,
     constraint fk_uster_tbl_par foreign key ( testnr )
        references uster_par ( testnr )
           on delete cascade
  )`,
  `comment on table uster_tbl is
     'Filas de datos importados desde archivos .TBL. Cada fila guarda TESTNR más las columnas de datos.'`,
  `create index idx_uster_tbl_testnr on
     uster_tbl (
        testnr
     )`,
  `create table tensorapid (
     id            number generated by default as identity primary key,
     testnr        varchar2(32) not null,
     seqno         number not null,
     no_           number,
     tiempo_rotura number,
     fuerza_b      number,
     elongacion    number,
     tenacidad     number,
     trabajo       number,
     created_at    timestamp default systimestamp,
     constraint fk_tensorapid_par foreign key ( testnr )
        references uster_par ( testnr )
           on delete cascade
  )`,
  `comment on table tensorapid is
     'Filas de datos importados desde archivos .TBL para la página TensoRapid.'`,
  `begin
    execute immediate 'alter table USTER_TBL add (U_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (CVM_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (INDICE_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (CVM_1M_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (CVM_3M_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (CVM_10M_PERCENT NUMBER)';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (TITULO VARCHAR2(400))';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin
    execute immediate 'alter table USTER_TBL add (TITULO_REL_PERC VARCHAR2(200))';
  exception when others then if sqlcode <> -1430 then raise; end if;
  end;`,
  `begin execute immediate 'alter table USTER_TBL add (H NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (SH NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (SH_1M NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (SH_3M NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (SH_10M NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (DELG_MINUS30_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (DELG_MINUS40_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (DELG_MINUS50_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (DELG_MINUS60_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (GRUE_35_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (GRUE_50_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (GRUE_70_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (GRUE_100_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (NEPS_140_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (NEPS_200_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (NEPS_280_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`,
  `begin execute immediate 'alter table USTER_TBL add (NEPS_400_KM NUMBER)'; exception when others then if sqlcode <> -1430 then raise; end if; end;`
]

// --- Función principal de ejecución ---
async function run() {
  const user = process.env.ORACLE_USER || 'SYSTEM'
  const pass = process.env.ORACLE_PASSWORD || 'Alfa1984'
  const connStr = process.env.ORACLE_CONNECTIONSTRING || 'localhost:1521/XE'

  let conn
  try {
    console.log('Connecting to Oracle...')
    conn = await oracledb.getConnection({ user, password: pass, connectString: connStr })
    console.log('Connected.')

    // 1. Ejecutar DROP statements
    console.log('--- Dropping existing tables (if any) ---')
    for (const stmt of dropStatements) {
      try {
        await conn.execute(stmt)
        console.log(`Executed: ${stmt.split(' ')[2]}`)
      } catch (err) {
        if (err.errorNum === 942) {
          // ORA-00942: table or view does not exist
          console.log(`Skipped: ${stmt.split(' ')[2]} (did not exist)`)
        } else {
          console.error(`Failed to execute: ${stmt}`, err)
          throw err
        }
      }
    }
    console.log('--- Finished dropping tables ---')

    // 2. Ejecutar CREATE statements
    console.log(`--- Creating ${createStatements.length} objects ---`)
    for (let i = 0; i < createStatements.length; i++) {
      const stmt = createStatements[i]
      try {
        const shortStmt = stmt.substring(0, 70).replace(/\s+/g, ' ') + '...'
        console.log(`Executing [${i + 1}/${createStatements.length}]: ${shortStmt}`)
        await conn.execute(stmt)
      } catch (err) {
        if (err.errorNum === 955) {
          // ORA-00955: name is already used
          console.warn(`  -> Skipped: object already exists.`)
        } else {
          console.error(`Statement ${i + 1} FAILED: ${stmt}`)
          console.error(err)
          throw err
        }
      }
    }
    await conn.commit()
    console.log('--- Finished creating objects ---')

    console.log('✅ DDL script completed successfully.')
  } catch (err) {
    console.error('❌ DDL run failed:', err.message)
    process.exitCode = 2
  } finally {
    if (conn) {
      try {
        await conn.close()
      } catch (e) {
        console.error('close conn err', e)
      }
    }
  }
}

run()
